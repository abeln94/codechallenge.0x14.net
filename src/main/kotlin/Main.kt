/**
 * 1) Picture without alpha, no alpha hidden
 * 2) PNG with valid IEND at the end, no hidden data
 * 3) Tested some color modifications, nothing obvious, the line seem to be a specific greyscale
 * 4) The line is a separate colorspace, and without aliasing (the rest of the image is). Something hidden here.
 * 5) Made a program to traverse the line and report the pixels in order
 * 6) Trying to convert the pixels to something in binary that when decoded produces something
 *
 * 7) After lots (LOTS) of tests, the git first commit is output???? what????
 * 8) New tablet, now in color, just a bit of tweaking of the traversal algorithm and I'm good to go
 * 9) Same git output, but now the payload is a random bytecode, what if I write is as file...
 * 10) Aja! It's a gzip (the header 1f  8b  08). Another tablet, third tweak...
 * 11) Another compressed text
 */
import java.awt.Color
import java.awt.image.BufferedImage
import java.io.File
import javax.imageio.ImageIO
import kotlin.math.abs

// I DISCOVERED THE COMPRESSION ALGORITHM BY MYSELF!!!!!
// yes, really, the 18, the 3, the 1=literal 0=code, etc. but there is a negative index which is impossible to know
// later (it's 2AM) I remebered the hint video, and found it is in fact exactly as what I discovered

// This is the full code, as with a previous submission it is not cleaned nor commented
// I just want this to end, sorry
// thanks for the challenge

fun main() {


//    val text

    val text =


//    println(text.windowed(8, 8))
    File("output.bin").writeBytes(text.windowed(8, 8).map { Integer.parseInt(it, 2).toByte() }.toByteArray()) // .map { if(it.toChar().isLetterOrDigit()) 0.toByte() else it }

    val window = ArrayDeque(text.windowed(8, 8))
    val data = mutableListOf(' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',)
    while (window.isNotEmpty()) {
        for (c in window.removeFirst().reversed()) {
            if(window.isEmpty()) break
            if (c == '1') {
                val char = window.removeFirst().toChar()
                data += char
                print(char)
            } else {
                val c = window.removeFirst() + window.removeFirst()
                val p = 18+(c[8].toString().repeat(20)+c.substring(8,12)+c.take(8)).toLong(2).toInt()
                val l = 3 + c.takeLast(4).toUByte(2).toByte()
                val message = if (p>=0) {
                    data.subList(p, p + l).joinToString("")
                } else {
                    " ".repeat(l)
                }
                message.toCharArray().forEach { data += it }
                print(message)
            }
        }
    }

//    println(text.windowed(8, 8))
//    File("output.bin").writeBytes(text.windowed(8, 8).map { Integer.parseInt(it, 2).toByte() }.toByteArray()) // .map { if(it.toChar().isLetterOrDigit()) 0.toByte() else it }
//
//    File("output.txt").writeText(text.windowed(8, 8).map { Integer.parseInt(it, 2) }.map{ if(it>127) it.toString(16) else "("+it.toString(16)+"="+it.toChar()+")" }.joinToString(" "))
//     .map { if(it[0]=='1') "00100000" else it }

//    fun decodeBinary(s: String): ByteArray {
//        val data = ByteArray(s.length / 8)
//        for (i in 0 until s.length) {
//            val c = s[i]
//            if (c == '1') {
//                data[i.shr(3)] = data[i.shr(3)].or(0x80.shr(i.and(0x7)).toByte())
//            } else if (c != '0') {
//                throw IllegalArgumentException("Invalid char in binary string")
//            }
//        }
//        return data;
//    }
//
//    val data = decodeBinary(text)
//    Files.write(File("file.txt").toPath(), data)

    return

//    val img = ImageIO.read(File("hidden_toy_story.png"))
//    val img = ImageIO.read(File("9788b1d0ecc849920aae9aa182e8ce54088d3684f2af994d1525223f313318c6.png"))
    val img = ImageIO.read(File("056deccabd65794ad9f54c379c03912b2c81d60938a5e7c85086e45094e93a5c.png"))

    val visited = mutableSetOf<Pair<Int, Int>>()

    var x = 81
    var y = 114

    val reds = mutableListOf<Int>()
    val greens = mutableListOf<Int>()
    val blues = mutableListOf<Int>()

    val result = buildString {

        fun aprint(a: Any?) = print(a).also { append(a) }

        img@ while (true) {

            visited += x to y
            val red = img.red(x, y)
            val green = img.green(x, y)
            val blue = img.blue(x, y)

//        println("$x,$y -> $red $green $blue")

//            aprint(red.binary(8))
//            print(" ")
//            aprint(green.binary(8))
//            print(" ")
//            aprint(blue.binary(8))
//            println()

            aprint((red - 72).binary(1))
            aprint((green - 72).binary(1))
            aprint((blue - 72).binary(1))

//            if (reds.isNotEmpty()) {
//                aprint(((red > (reds.last()))).bin)
//                aprint(((green > (greens.last()))).bin)
//                aprint(((blue > (blues.last()))).bin)
//            }

//            val d = 75
//            aprint(if (red != d) "1" else "0")
//            aprint(if (blue != d) "1" else "0")
//            aprint(if (green != d) "1" else "0")
//        aprint((blue != green).bin)
//            aprint((green % 2 == 0).bin)
//            aprint((green == 77).bin)

            reds += red
            greens += green
            blues += blue

            for ((dx, dy) in listOf(0 to 1, 1 to 0, 0 to -1, -1 to 0, 1 to -1, 1 to 1, -1 to 1, -1 to -1, 0 to 2, 2 to 0, 0 to -2, -2 to 0)) {
                val i = x + dx
                val j = y + dy
                if (i == x && j == y) continue

//                if (img.red(i, j) > 100) continue


                if (abs(img.red(i, j) - red) > 5) continue
                if (abs(img.green(i, j) - green) > 5) continue
                if (abs(img.blue(i, j) - blue) > 5) continue

                if ((i to j) in visited) continue

                x = i
                y = j
                continue@img
            }
            break@img
        }

    }

//    val inverted = result.map { (it == '0').bin }.joinToString("")
    println()
    println()
    println()
    println(result.asBinary())
//    println()
//    println(inverted)
//    println(inverted.asBinary())
//    println()
//    println(result.reversed())
//    println(result.reversed().asBinary())
//    println()
//    println(inverted.reversed())
//    println(inverted.reversed().asBinary())
//
//    println()
//    println(reds.histogram())
//    println(greens.histogram())
//    println(blues.histogram())
//    println(result.length/8)

//    (visited.minOf { it.second }..visited.maxOf { it.second }).forEach { y ->
//        (visited.minOf { it.first }..visited.maxOf { it.first }).forEach { x ->
//            print(if (x to y in visited) "#" else " ")
//        }
//        println()
//    }

}

private fun String.toInt() = Integer.parseInt(this, 2)
private fun String.toChar() = Integer.parseInt(this, 2).toByte().toChar()

private fun String.asBinary() =
    windowed(8, 8).map { Integer.parseInt(it, 2).toChar() }.joinToString("")


private fun <T : Comparable<T>> Iterable<T>.histogram() =
    groupBy { it }.mapValues { it.value.size }.entries.sortedBy { it.key }


fun BufferedImage.red(x: Int, y: Int) = Color(getRGB(x, y)).red
fun BufferedImage.green(x: Int, y: Int) = Color(getRGB(x, y)).green
fun BufferedImage.blue(x: Int, y: Int) = Color(getRGB(x, y)).blue

fun Int.binary(length: Int) = toBigInteger().toString(2).padStart(length, '0').takeLast(length)
val Boolean.bin get() = if (this) '1' else '0'